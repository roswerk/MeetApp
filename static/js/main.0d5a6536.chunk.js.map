{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","event","showHideDetails","handleShowHideButton","setState","showHidenDetails","this","props","className","href","htmlLink","description","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","location","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberOfEvents","numberOfEvents","errorText","updateEvents","htmlFor","placeholder","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0d5a6536.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Event extends Component{\n\n  state = {\n    event: {},\n    showHideDetails: false,\n  };\n\n  handleShowHideButton = () => {\n    if(this.state.showHideDetails === true){\n      this.setState({showHidenDetails: false})\n    } else{\n      this.setState({showHideDetails: true});\n    };\n  };\n\n  render(){\n    const {event} = this.props;\n    return (<div>\n      <h1 className=\"summary\"></h1>\n      <p className=\"dateTime\"></p>\n      <p className=\"location\"></p>\n\n      {this.state.showHideDetails && (\n        <div className=\"event-details\">\n          <h2>About the event:</h2>\n          <a href={event.htmlLink}>See Details on Google Calendar</a>\n          <p>{event.description}</p>\n        </div>\n      )}\n      <button className=\"seeMore-btn\" onClick={ () => this.handleShowHideButton()}>{!this.state.showHideDetails? \"Show details\" : \"Hide details\"}</button>\n    </div> )\n  }\n}\n\nexport default Event","import React, {Component} from \"react\";\nimport Event from \"./Event\";\n\nclass EventList extends Component{\n\n  render(){\n    const {events} = this.props;\n    return(\n    <ul className=\"EventList\">\n      {events.map(event => \n        <li key={event.id}>\n          <Event event={event} />\n        </li>\n      )}\n    </ul>\n  );\n  \n}}\n\nexport default EventList;\n\n","import React, {Component} from \"react\";\n\nclass CitySearch extends Component{\n\n  state = {\n    query : \"\",\n    suggestions: []\n    }\n\nhandleInputChanged = (event) => {\n  const value = event.target.value;\n  const suggestions = this.props.locations.filter((location) => {\n    return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n  });\n  this.setState({query: value,\n  suggestions,\n});\n}\n\nhandleItemClicked = (suggestion) => {\n  this.setState({\n    query: suggestion\n  });\n};\n\n  render(){\n    return(\n      <div className=\"CitySearch\">\n        <input \n        type=\"text\" \n        className=\"city\"\n        value= {this.state.query}\n        onChange= {this.handleInputChanged} />  \n\n        <ul className=\"suggestions\">\n          {this.state.suggestions.map((suggestion) => (\n            <li key={suggestion} onClick={() => this.handleItemClicked(suggestion)}>{suggestion}</li>\n          ))}\n          <li key=\"all\">\n            <b>See all cities</b>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default CitySearch;\n\n","import React, { Component } from \"react\";\n\n\nclass NumberOfEvents extends Component {\n  state = {\n    numberOfEvents: 32,\n    errorText: \" \"\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n\n    if (value < 1) {\n      return this.setState({\n        errorText: \"Please choose a number between 1 and 32\",\n        numberOfEvents: \" \"\n      });\n\n    } else if (value > 32) {\n      return this.setState({\n        errorText: \"Please choose a number between 1 and 32\",\n        numberOfEvents: \"\"\n      });\n\n    } else {    \n      this.setState({\n        numberOfEvents: value,\n        errorText:\" \"\n      });\n      this.props.updateEvents(\" \", value);\n    } \n  };\n\n  render() {\n    return (\n      <div className=\"NumberOfEvents\">\n        <label htmlFor=\"numberOfEvent\">Number of Events</label>\n        <input\n          className=\"event-number-input\"\n          placeholder=\"Enter Number of Events to display\"\n          type=\"number\"\n          value={this.state.numberOfEvents}\n          onChange={this.handleInputChanged}\n        />\n      </div>\n    );\n  }; \n};\n\nexport default NumberOfEvents;","import React, {Component} from 'react';\nimport './App.css';\nimport EventList from \"./EventList\";\nimport CitySearch from \"./CitySearch\"; \nimport NumberOfEvents from './NumberOfEvents';\n\nclass App extends Component{\n  render(){\n    return (\n      <div className=\"App\">\n      <CitySearch />\n      <EventList />\n      <NumberOfEvents />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}